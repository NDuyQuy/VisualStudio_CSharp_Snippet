<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>CRUD Repository Implementation</Title>
			<Author>Your Name</Author>
			<Description>Creates a singleton CRUD repository implementation</Description>
			<Shortcut>repcrud</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>ClassName</ID>
					<ToolTip>Name of the repository</ToolTip>
					<Default>Repository</Default>
				</Literal>
				<Literal>
					<ID>InterfaceName</ID>
					<ToolTip>Name of the repository interface</ToolTip>
					<Default>IRepository</Default>
				</Literal>
				<Literal>
					<ID>EntityType</ID>
					<ToolTip>Type of the entity class</ToolTip>
					<Default>TEntity</Default>
				</Literal>
				<Literal>
					<ID>IdType</ID>
					<ToolTip>Type of the identifier</ToolTip>
					<Default>int</Default>
				</Literal>
				<Literal>
					<ID>DBContext</ID>
					<ToolTip>Name of the using db context</ToolTip>
					<Default>ApplicationDBContext</Default>
				</Literal>
				<Literal>
					<ID>DbSetName</ID>
					<ToolTip>Type of the DbSet in context</ToolTip>
					<Default>DbSet</Default>
				</Literal>
			</Declarations>
			<Code Language="CSharp">
				<![CDATA[namespace DataAccess.Repository
{
    public class $ClassName$ : $InterfaceName$
    {
        private readonly $DbContext$ _context;
        public $ClassName$($DbContext$ context)
        {
           _context = context;
        }

        public async Task<$EntityType$?> GetAsync($IdType$ id)
			=> await _context.$DbSetName$.FindAsync(id);

        public async Task<IEnumerable<$EntityType$>> GetAllAsync()
			=> _context.$DbSetName$;

        public async Task<bool> AddAsync($EntityType$ entity)
        {
			try
			{
				await _context.$DbSetName$.AddAsync(entity);
				await _context.SaveChangesAsync();
			}
			catch(Exception)
			{
				return false;
			}
            return true;
        }

        public async Task<bool> UpdateAsync($EntityType$ entity)
        {
			var existedEntity = await GetAsync(entity.ID)??throw new Exception("Invalid entity");
			try
			{
				existedEntity = $DBContext$.Entry(existedEntity).State = EntryState.Detached;
				_context.$DbSetName$.Update(entity);
				await _context.SaveChangesAsync();
			}
			catch(Exception)
			{
				return false;
			}
            return true;
        }

        public async Task<bool> RemoveAsync($IdType$ id)
        {
			var existedEntity = await GetAsync(id)??throw new Exception("Invalid entity");
			try
			{
				_context.$DbSetName$.Remove(entity);
				await _context.SaveChangesAsync();
			}
			catch(Exception)
			{
				throw new Exception("Update Failed!");
			}
            return (await GetAsync(id))==null;
        }
    }
}]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>